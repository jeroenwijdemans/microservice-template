buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eu.appsatori.fatjar'

group 'com.wijdemans'
version '1.0.1'


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.verbose = false
}

repositories {
    mavenLocal()
}

repositories {
    mavenCentral()
}


fatJar {
    manifest {
        attributes 'Main-Class': 'com.wijdemans.Main'
    }
}

ext {
    versions = [:]
    libraries = [:]
}

versions += [
        slf4j        : '1.7.18',
        logback      : '1.1.2',
        groovy       : '2.4.6',
        swagger   : '1.5.9',
        jerseyVersion: '2.23.2',
]

libraries.logging = [
        "org.slf4j:log4j-over-slf4j:$versions.slf4j",
        "org.slf4j:jcl-over-slf4j:$versions.slf4j",
        'com.cwbase:logback-redis-appender:1.1.5',
        "ch.qos.logback:logback-core:$versions.logback",
        "ch.qos.logback:logback-classic:$versions.logback",
]

libraries.testframework = [
        "org.spockframework:spock-core:$versions.spock",
        "org.codehaus.groovy:groovy:$versions.groovy",

        'org.objenesis:objenesis:2.0',
        'cglib:cglib-nodep:2.2'
]

configurations {
    compile.exclude group: 'javax.ws.rs:jsr311-api:1.1.1'
}

dependencies {
    compile libraries.logging

    compile 'com.wijdemans:valueobjects:0.1.0'

    compile 'org.mongodb:mongo-java-driver:3.2.2'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.3'

    compile 'io.prometheus:simpleclient:0.0.14'
    compile 'io.prometheus:simpleclient_servlet:0.0.14'
    compile 'io.prometheus:simpleclient_hotspot:0.0.14'

    compile 'com.googlecode.json-simple:json-simple:1.1.1'

    compile 'org.glassfish.jersey.core:jersey-client:2.23.2'
    compile 'org.glassfish.jersey.core:jersey-server:2.23.2'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.23.2'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.23.2'

    compile 'org.apache.kafka:kafka-clients:0.10.0.1'

    compile 'org.neo4j.driver:neo4j-java-driver:1.0.5'

    compile("io.swagger:swagger-jersey2-jaxrs:${versions.swagger}")

    // provide http injection
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    compile 'org.eclipse.jetty:jetty-servlet:9.3.12.v20160915' // same version as used by 2.22.2
    compile 'org.glassfish.jersey.containers:jersey-container-jetty-http:2.23.2'


    compile "org.glassfish.jersey.media:jersey-media-json-jackson:${versions.jerseyVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.3"

    compile "org.glassfish.jersey.security:oauth2-client:${versions.jerseyVersion}"  // ???
    compile 'org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:1.0.1'

    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.2'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile libraries.testframework

}

task(run, dependsOn: 'classes', type: JavaExec) {
    main = 'com.wijdemans.Main'
    classpath = sourceSets.main.runtimeClasspath
}

task version << {
    println version
}

task copyDockerResources(type: Copy) {
    from 'cd/'
    into 'build/libs'
    include 'Dockerfile'
}

